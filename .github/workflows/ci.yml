name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        zig-version: ['0.15.1']

    steps:
    - uses: actions/checkout@v4

    - name: Setup Zig
      uses: mlugg/setup-zig@v2
      with:
        version: ${{ matrix.zig-version }}

    - name: Install Vulkan SDK (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libvulkan-dev vulkan-tools

    - name: Install Vulkan SDK (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install molten-vk vulkan-headers

    - name: Cache Zig build artifacts
      uses: actions/cache@v3
      with:
        path: |
          .zig-cache
          zig-out
        key: ${{ runner.os }}-zig-${{ matrix.zig-version }}-${{ hashFiles('build.zig.zon') }}
        restore-keys: |
          ${{ runner.os }}-zig-${{ matrix.zig-version }}-

    - name: Run Tests
      run: zig build test

    - name: Run Heavy Tests
      if: matrix.os == 'ubuntu-latest'
      run: zig build test-heavy

    - name: Build All Tools
      run: zig build

    - name: Run Performance Benchmarks
      run: zig build bench-all

    - name: Run Performance CI Tool
      run: zig build perf-ci

    - name: Run GPU Tests (if Vulkan available)
      if: matrix.os != 'macos-latest'
      run: zig build test-gpu || echo "GPU tests skipped - Vulkan not available"

    - name: Upload Performance Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports-${{ runner.os }}
        path: |
          performance_reports/
          TEST_BENCHMARK_REPORT.md
          PERFORMANCE_REPORT.md

  performance-guard:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup Zig
      uses: mlugg/setup-zig@v2
      with:
        version: '0.15.1'

    - name: Install Vulkan SDK
      run: |
        sudo apt-get update
        sudo apt-get install -y libvulkan-dev vulkan-tools

    - name: Run Performance Guard
      run: zig build perf-guard -- 50000000

    - name: Performance Regression Check
      run: |
        # Check if performance reports exist and are within thresholds
        if [ -f "performance_reports/performance_report_$(date +%s).md" ]; then
          echo "✅ Performance reports generated successfully"
        else
          echo "❌ Performance reports not found"
          exit 1
        fi

  release:
    runs-on: ubuntu-latest
    needs: [test, performance-guard]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Zig
      uses: mlugg/setup-zig@v2
      with:
        version: '0.15.1'

    - name: Build Release
      run: zig build -Doptimize=ReleaseFast

    - name: Create Release Archive
      run: |
        mkdir release
        cp zig-out/bin/* release/ 2>/dev/null || true
        cp -r docs/ release/ 2>/dev/null || true
        tar -czf abi-${{ github.sha }}.tar.gz release/

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        body: |
          Automated release build for commit ${{ github.sha }}

          ## Changes
          - Performance optimizations
          - Bug fixes
          - Documentation updates

          ## Build Information
          - Zig version: 0.15.1
          - Build type: ReleaseFast
          - Platform: Linux x86_64
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: abi-${{ github.sha }}.tar.gz
        asset_name: abi-${{ github.sha }}.tar.gz
        asset_content_type: application/gzip

  deploy-docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Install Jekyll
      run: |
        gem install jekyll bundler
        cd docs
        bundle install

    - name: Build Documentation
      run: |
        cd docs
        bundle exec jekyll build --destination ../_site

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_site
        cname: abi-docs.example.com  # Replace with your domain
