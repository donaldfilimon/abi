# GPU-enabled Docker build for ABI AI Framework
FROM nvidia/cuda:12.2-devel-ubuntu22.04 AS builder

# Install Zig and system dependencies
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    software-properties-common \
    libssl-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Zig
RUN wget -O zig.tar.xz https://ziglang.org/builds/zig-x86_64-linux-0.16.0-dev.427+86077fe6b.tar.xz \
    && tar -xf zig.tar.xz \
    && mv zig-x86_64-linux-0.16.0-dev.427+86077fe6b /usr/local/zig \
    && rm zig.tar.xz

ENV PATH="/usr/local/zig:$PATH"

# Set working directory
WORKDIR /app

# Copy build files
COPY build.zig build.zig.zon ./

# Copy source code
COPY src/ src/

# Build optimized release binary with GPU support
RUN zig build -Doptimize=ReleaseFast -Denable_cuda=true

# GPU Runtime stage
FROM nvidia/cuda:12.2-runtime-ubuntu22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r abi && useradd -r -g abi abi

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/zig-out/bin/abi /app/abi

# Copy configuration
COPY --from=builder /app/.wdbx-config /app/.wdbx-config
COPY --from=builder /app/deploy/config/ /app/config/

# Create data directories
RUN mkdir -p /app/data /app/models /app/logs && \
    chown -R abi:abi /app

# Switch to non-root user
USER abi

# GPU environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV ABI_ENABLE_GPU=true
ENV ABI_ENABLE_SIMD=true

# Expose ports
EXPOSE 8080 8443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["./abi", "server", "start", "--port", "8080", "--host", "0.0.0.0"]
