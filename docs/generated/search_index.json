[
  {"file": "generated\\API_REFERENCE.md", "title": "WDBX-AI API Reference", "excerpt": "--- layout: documentation title: \"API Reference\" description: \"Complete API reference for WDBX-AI with detailed function documentation\" --- Main database interface for vector operations. Initialize a new database instance. **Parameters:** - allocator: Memory allocator to use - config: Database confi"},
  {"file": "generated\\CODE_API_INDEX.md", "title": "Code API Index (Scanned)", "excerpt": "Scanned 46 Zig files under src/. This index lists public declarations discovered along with leading doc comments. - type GpuBackendConfig Configuration for the GPU backend. - type GpuBackend Main context for GPU-accelerated operations. - const Error Error set for all GPU backend operations. - fn ini"},
  {"file": "generated\\DEFINITIONS_REFERENCE.md", "title": "WDBX-AI Definitions Reference", "excerpt": "--- layout: documentation title: \"Definitions Reference\" description: \"Comprehensive glossary and concepts for WDBX-AI technology\" --- A specialized database designed to store, index, and search high-dimensional vectors efficiently. Unlike traditional databases that store scalar values, vector datab"},
  {"file": "generated\\EXAMPLES.md", "title": "WDBX-AI Usage Examples", "excerpt": "--- layout: documentation title: \"Examples & Tutorials\" description: \"Practical examples and tutorials for using WDBX-AI effectively\" ---"},
  {"file": "generated\\MODULE_REFERENCE.md", "title": "WDBX-AI Module Reference", "excerpt": "--- layout: documentation title: \"Module Reference\" description: \"Comprehensive reference for all WDBX-AI modules and components\" --- The primary module containing all core functionality. - **Database Engine**: High-performance vector database with HNSW indexing - **AI System**: Neural networks and "},
  {"file": "generated\\PERFORMANCE_GUIDE.md", "title": "WDBX-AI Performance Guide", "excerpt": "--- layout: documentation title: \"Performance Guide\" description: \"Comprehensive performance optimization guide with benchmarks and best practices\" --- - **Optimal range**: 128-512 dimensions - **Too small**: Poor representation quality - **Too large**: Increased memory and computation - **Database "}
]
